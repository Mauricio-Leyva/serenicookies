---
import ProductCard from './ProductCard.astro';

// Datos de productos (simulados)
const products = [
  {
    id: "p1",
    name: "Galleta Frutos Rojos",
    description: "Galleta de frutos rojos, trozos de fruta, sabor vainilla y nuez de la india, con un glaseado de frambuesa.",
    price: 70.00,
    image: "imgs/frutos.jpg",
    category: "Premium",
    rating: 4.9,
    isBestseller: true,
    is18Plus: true,
    discount: 0
  },
  {
    id: "p2",
    name: "Galleta Kinder Bueno",
    description: "Sabor vainilla con trozos de kinder bueno y cubierta de chocolate con leche.",
    price: 75.00,
    image: "imgs/kinder.jpg",
    category: "Clásicas",
    rating: 4.6,
    isNew: true,
    discount: 0
  },
  {
    id: "p3",
    name: "Galleta de Lotus",
    description: "Sabor vainilla con crema de biscoff y cubierta de la misma con un trozo de galleta lotus.",
    price: 75.00,
    image: "imgs/lotus.jpg",
    category: "Especiales",
    rating: 4.7,
    discount: 10
  },
  {
    id: "p4",
    name: "Galleta de Taro",
    description: "Sabor a taro rellena de chocolate blanco con un pequeño troso de chocolate hershey's.",
    price: 75.00,
    image: "imgs/taro.jpg",
    category: "Clásicas",
    rating: 4.5,
    discount: 0
  },
  {
    id: "p5",
    name: "Galleta Red Velvet",
    description: "Sabor chocolate, con interior de trozos de chocolate blanco.",
    price: 60.00,
    image: "imgs/red.jpg",
    category: "Premium",
    rating: 4.9,
    isBestseller: true,
    discount: 0
  },
  {
    id: "p6",
    name: "Galleta de Triple Chocolate",
    description: "Galleta de triple chocolate con un rico relleno de nutela.",
    price: 60.00,
    image: "imgs/triple.jpg",
    category: "Especiales",
    rating: 4.3,
    isNew: true,
    discount: 15
  },
  {
    id: "p7",
    name: "Galleta Birthday Cake",
    description: "Sabor vainilla con trozos de chocolate blanco, un glaseado de queso Philadelphia y una capa de chispas de sabores.",
    price: 60.00,
    image: "imgs/birthday.jpg",
    category: "Premium",
    rating: 4.8,
    discount: 0
  },
  {
    id: "p8",
    name: "Galleta de Matcha",
    description: "Galleta de Té verde organico, con interor de trozos de chocolate blanco.",
    price: 60.00,
    image: "imgs/matcha.jpg",
    category: "Clásicas",
    rating: 4.4,
    discount: 0
  }
];

// Extraer categorías únicas
const categories = ["Todas", ...new Set(products.map(product => product.category))];
---

<section id="productos" class="py-16 bg-white">
  <div class="container-custom">
    <div class="text-center mb-12">
      <h2 class="text-3xl font-bold mb-3 text-cookie-brown">Nuestras Galletas</h2>
      <p class="text-lg max-w-2xl mx-auto text-cookie-dark/80 text-gray-600">
        Descubre nuestra selección de galletas artesanales, elaboradas con los mejores ingredientes y mucho amor.
      </p>
    </div>
    
    <!-- Filtros de categorías -->
    <div class="flex flex-wrap justify-center gap-2 mb-8">
      {categories.map((category) => (
        <button
          class="category-filter px-4 py-2 rounded-full border border-cookie-light transition-colors duration-200 text-sm"
          data-category={category === "Todas" ? "all" : category}
        >
          {category}
        </button>
      ))}
    </div>
    
    <!-- Búsqueda -->
    <div class="max-w-md mx-auto mb-8">
      <div class="relative">
        <input
          type="text"
          id="product-search"
          placeholder="Buscar galletas..."
          class="w-full p-3 pl-10 rounded-full border border-cookie-light focus:outline-none focus:ring-2 focus:ring-cookie-accent/50"
        />
        <i class="fas fa-search absolute left-3 top-1/2 -translate-y-1/2 text-cookie-brown/70"></i>
      </div>
    </div>
    
    <!-- Grid de productos -->
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6" id="products-grid">
      {products.map((product) => (
        <ProductCard
          id={product.id}
          name={product.name}
          description={product.description}
          price={product.price}
          image={product.image}
          category={product.category}
          rating={product.rating}
          isNew={product.isNew}
          isBestseller={product.isBestseller}
          discount={product.discount}
          is18Plus={product.is18Plus}
        />
      ))}
    </div>
    
    <!-- Estado de resultados -->
    <div id="no-results" class="hidden text-center py-8">
      <p class="text-lg text-gray-500">No se encontraron productos con esa búsqueda.</p>
      <button id="reset-filters" class="mt-4 btn btn-secondary">Mostrar todos los productos</button>
    </div>
  </div>
</section>

<script>
  // Lógica para los filtros de productos
  document.addEventListener('DOMContentLoaded', function() {
    const filterButtons = document.querySelectorAll('.category-filter');
    const productCards = document.querySelectorAll('.product-card');
    const searchInput = document.getElementById('product-search');
    const noResults = document.getElementById('no-results');
    const resetButton = document.getElementById('reset-filters');
    
    // Establecer el filtro "Todas" como activo por defecto
    const allCategoryButton = document.querySelector('[data-category="all"]');
    if (allCategoryButton) {
      allCategoryButton.classList.add('bg-cookie-brown', 'text-white');
    }
    
      const activeCategoryButton = document.querySelector('.category-filter.bg-cookie-brown');
      const activeCategory = activeCategoryButton ? (activeCategoryButton as HTMLElement).dataset.category : 'all';
    function filterProducts() {
      const searchTerm = searchInput ? (searchInput as HTMLInputElement).value.toLowerCase() : '';
      const activeCategory = (document.querySelector('.category-filter.bg-cookie-brown') as HTMLElement)?.dataset.category || 'all';
      
      let hasVisibleProducts = false;
      
      productCards.forEach(card => {
        const productNameEl = card.querySelector('h3');
        const productDescEl = card.querySelector('p');
        const productName = productNameEl ? productNameEl.textContent?.toLowerCase() || '' : '';
        const productDescription = productDescEl ? productDescEl.textContent?.toLowerCase() || '' : '';
        const productCategory = (card as HTMLElement).dataset.category;
        
        // Comprobar si coincide con la búsqueda y la categoría
        const matchesSearch = productName.includes(searchTerm) || productDescription.includes(searchTerm);
        const matchesCategory = activeCategory === 'all' || productCategory === activeCategory;
        
        // Mostrar u ocultar el producto
        if (matchesSearch && matchesCategory) {
          card.classList.remove('hidden');
          hasVisibleProducts = true;
        } else {
          card.classList.add('hidden');
        }
      });
      
      // Mostrar u ocultar mensaje de "no hay resultados"
      if (hasVisibleProducts) {
        if (noResults) noResults.classList.add('hidden');
      } else {
        if (noResults) noResults.classList.remove('hidden');
      }
    }
    
    // Evento para filtros de categoría
    filterButtons.forEach(button => {
      button.addEventListener('click', () => {
        // Eliminar clase activa de todos los botones
        filterButtons.forEach(btn => btn.classList.remove('bg-cookie-brown', 'text-white'));
        
        // Añadir clase activa al botón clickeado
        button.classList.add('bg-cookie-brown', 'text-white');
        
        // Filtrar productos
        filterProducts();
      });
    });
    
    // Evento para búsqueda
    if (searchInput) {
      searchInput.addEventListener('input', filterProducts);
    }
    
    // Evento para restablecer filtros
    if (resetButton) {
      resetButton.addEventListener('click', () => {
        if (searchInput) {
          (searchInput as HTMLInputElement).value = '';
        }
        
        // Activar la categoría "Todas"
        filterButtons.forEach(btn => btn.classList.remove('bg-cookie-brown', 'text-white'));
        const allCategoryButton = document.querySelector('[data-category="all"]');
        if (allCategoryButton) {
          allCategoryButton.classList.add('bg-cookie-brown', 'text-white');
        }
        
        filterProducts();
      });
    }
  });
</script>